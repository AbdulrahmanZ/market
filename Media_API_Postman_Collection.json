{
	"info": {
		"_postman_id": "media-api-collection",
		"name": "Market App - Media API",
		"description": "Collection for fetching images and videos for shops and items",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "shop_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "item_id",
			"value": "1",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. Shop Profile Images",
			"item": [
				{
					"name": "Get Shop Profile by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/shop/{{shop_id}}/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"shop",
								"{{shop_id}}",
								"profile"
							]
						},
						"description": "Fetch shop profile image directly by shop ID. Returns binary image data."
					}
				},
				{
					"name": "Get Shop Profile Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/shop/{{shop_id}}/profile/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"shop",
								"{{shop_id}}",
								"profile",
								"info"
							]
						},
						"description": "Get metadata about shop profile image including filename, content type, and existence status."
					}
				},
				{
					"name": "Get Shop Profile by Filename",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/shop-profiles/{{shop_id}}/profile-uuid.jpg",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"shop-profiles",
								"{{shop_id}}",
								"profile-uuid.jpg"
							]
						},
						"description": "Fetch shop profile image by exact filename. Replace 'profile-uuid.jpg' with actual filename."
					}
				}
			]
		},
		{
			"name": "2. Item Media",
			"item": [
				{
					"name": "Get Item Media by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/item/{{item_id}}/media",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"item",
								"{{item_id}}",
								"media"
							]
						},
						"description": "Fetch item media (image or video) directly by item ID. Returns binary media data with appropriate content-type."
					}
				},
				{
					"name": "Get Item Media Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/item/{{item_id}}/media/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"item",
								"{{item_id}}",
								"media",
								"info"
							]
						},
						"description": "Get metadata about item media including type (IMAGE/VIDEO), filename, content type, and existence status."
					}
				},
				{
					"name": "Get Item Media by Filename",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/items/{{shop_id}}/item-1-uuid.jpg",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"items",
								"{{shop_id}}",
								"item-1-uuid.jpg"
							]
						},
						"description": "Fetch item media by exact filename. Replace 'item-1-uuid.jpg' with actual filename."
					}
				}
			]
		},
		{
			"name": "3. Media Listing",
			"item": [
				{
					"name": "List All Shop Items Media",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/shop/{{shop_id}}/items/media/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"shop",
								"{{shop_id}}",
								"items",
								"media",
								"list"
							]
						},
						"description": "Get a comprehensive list of all media files for items in a shop, including counts and direct access URLs."
					}
				}
			]
		},
		{
			"name": "4. System Health",
			"item": [
				{
					"name": "File Service Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"health"
							]
						},
						"description": "Check if the file service is running and can access the upload directories."
					}
				}
			]
		},
		{
			"name": "5. Test Scenarios",
			"item": [
				{
					"name": "Test Missing Shop Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/shop/999/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"shop",
								"999",
								"profile"
							]
						},
						"description": "Test fetching profile for non-existent shop (should return 404)."
					}
				},
				{
					"name": "Test Missing Item Media",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/item/999/media",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"item",
								"999",
								"media"
							]
						},
						"description": "Test fetching media for non-existent item (should return 404)."
					}
				},
				{
					"name": "Test Invalid Filename",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/files/items/{{shop_id}}/nonexistent-file.jpg",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"items",
								"{{shop_id}}",
								"nonexistent-file.jpg"
							]
						},
						"description": "Test fetching non-existent file by filename (should return 404)."
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set dynamic variables if needed",
					"// pm.environment.set('timestamp', Date.now());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Common tests for media endpoints",
					"if (pm.response.code === 200) {",
					"    // Check if response has content",
					"    pm.test('Response has content', function () {",
					"        pm.expect(pm.response.responseSize).to.be.above(0);",
					"    });",
					"    ",
					"    // Check content-type header for media endpoints",
					"    if (pm.request.url.path.includes('media') && !pm.request.url.path.includes('info')) {",
					"        pm.test('Has valid content-type for media', function () {",
					"            const contentType = pm.response.headers.get('Content-Type');",
					"            pm.expect(contentType).to.match(/^(image|video)\\//);",
					"        });",
					"    }",
					"    ",
					"    // Check for cache headers",
					"    pm.test('Has cache control header', function () {",
					"        pm.expect(pm.response.headers.has('Cache-Control')).to.be.true;",
					"    });",
					"}",
					"",
					"// Test for info endpoints",
					"if (pm.request.url.path.includes('info')) {",
					"    if (pm.response.code === 200) {",
					"        pm.test('Info response is JSON', function () {",
					"            pm.response.to.be.json;",
					"        });",
					"        ",
					"        pm.test('Info contains required fields', function () {",
					"            const jsonData = pm.response.json();",
					"            if (pm.request.url.path.includes('shop')) {",
					"                pm.expect(jsonData).to.have.property('shopId');",
					"                pm.expect(jsonData).to.have.property('hasProfileImage');",
					"            } else if (pm.request.url.path.includes('item')) {",
					"                pm.expect(jsonData).to.have.property('itemId');",
					"                pm.expect(jsonData).to.have.property('hasMedia');",
					"            }",
					"        });",
					"    }",
					"}",
					"",
					"// Test for listing endpoints",
					"if (pm.request.url.path.includes('list')) {",
					"    if (pm.response.code === 200) {",
					"        pm.test('List response contains counts', function () {",
					"            const jsonData = pm.response.json();",
					"            pm.expect(jsonData).to.have.property('totalItems');",
					"            pm.expect(jsonData).to.have.property('itemsWithMedia');",
					"            pm.expect(jsonData).to.have.property('imageCount');",
					"            pm.expect(jsonData).to.have.property('videoCount');",
					"        });",
					"    }",
					"}"
				]
			}
		}
	]
}
